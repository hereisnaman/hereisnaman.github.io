{"version":3,"sources":["webpack:///./node_modules/lodash.isequal/index.js","webpack:///./node_modules/react-ace/lib/editorOptions.js","webpack:///./node_modules/react-ace/lib/split.js","webpack:///./node_modules/react-ace/lib/ace.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/lodash.get/index.js","webpack:///./node_modules/brace/ext/split.js","webpack:///./node_modules/react-ace/lib/diff.js","webpack:///./node_modules/diff-match-patch/index.js","webpack:///./node_modules/react-ace/lib/index.js"],"names":["global","module","LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","MAX_SAFE_INTEGER","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","Object","freeSelf","self","root","Function","freeExports","exports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","e","nodeIsTypedArray","isTypedArray","arraySome","array","predicate","index","length","mapToArray","map","result","Array","size","forEach","value","key","setToArray","set","uid","func","transform","arrayProto","prototype","funcProto","objectProto","coreJsData","funcToString","toString","hasOwnProperty","maskSrcKey","exec","keys","IE_PROTO","nativeObjectToString","reIsNative","RegExp","call","replace","Buffer","undefined","Symbol","Uint8Array","propertyIsEnumerable","splice","symToStringTag","toStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","arg","DataView","getNative","Map","Promise","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","this","clear","entry","ListCache","MapCache","SetCache","values","__data__","add","Stack","data","arrayLikeKeys","inherited","isArr","isArray","isArg","isArguments","isBuff","isType","skipIndexes","n","iteratee","baseTimes","String","isIndex","push","assocIndexOf","eq","baseGetTag","isOwn","tag","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","stack","object","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","name","message","convert","isPartial","stacked","get","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","constructor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isFunction","test","baseKeys","Ctor","proto","arrLength","seen","arrValue","othIndex","has","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","type","getValue","pop","hash","string","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","resolve","ctorString","arguments","isLength","baseUnary","defineProperty","editorOptions","editorEvents","debounce","fn","delay","timer","context","args","clearTimeout","setTimeout","apply","getAceInstance","ace","window","acequire","require","__webpack_require__","_extends","assign","target","i","source","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_editorOptions","_react","_react2","_interopRequireDefault","_propTypes2","_lodash2","_lodash4","obj","__esModule","default","Range","Split","SplitComponent","_Component","instance","TypeError","_classCallCheck","_this","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","method","bind","subClass","superClass","create","setPrototypeOf","_inherits","Component","_this2","_props","className","onBeforeLoad","mode","focus","theme","fontSize","defaultValue","cursorStart","showGutter","wrapEnabled","showPrintMargin","_props$scrollMargin","scrollMargin","keyboardHandler","onLoad","commands","annotations","markers","splits","editor","edit","refEditor","editorProps","split","container","env","splitEditor","getEditor","setShowPrintMargin","renderer","setShowGutter","availableOptions","$options","debounceChangePeriod","onChange","defaultValueForEditor","valueForEditor","session","setUndoManager","UndoManager","setTheme","setScrollMargin","getSession","setMode","setFontSize","setUseWrapMode","on","onFocus","onBlur","onInput","onCopy","onPaste","selection","onSelectionChange","onCursorChange","onScroll","setValue","newAnnotations","newMarkers","setAnnotations","handleMarkers","_i","option","setOption","console","warn","handleOptions","command","bindKey","addCommand","setKeyboardHandler","sp","setOrientation","orientation","BELOW","BESIDE","resize","prevProps","_this3","oldProps","nextProps","setSplits","setOptions","nextValue","silent","pos","toJSON","fromJSON","oldAnnotations","oldMarkers","appliedClassesArray","trim","oldClass","indexOf","join","height","width","destroy","event","getSelection","text","y","currentMarkers","getMarkers","removeMarker","id","_i2","_ref","startRow","startCol","endRow","endCol","_ref$inFront","inFront","range","addMarker","item","_props2","style","divStyle","createElement","ref","updateRef","propTypes","number","bool","oneOfType","arrayOf","minLines","maxLines","readOnly","highlightActiveLine","tabSize","enableBasicAutocompletion","enableLiveAutocompletion","defaultProps","ReactAce","onValidate","navigateFileEnd","getAnnotations","handleScrollMargins","margins","setScrollMargins","webpackPolyfill","deprecate","paths","children","l","FUNC_ERROR_TEXT","INFINITY","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","symbolToString","baseGet","path","isSymbol","isKey","stringToPath","toKey","isHostObject","memoize","baseToString","match","quote","resolver","memoized","cache","Cache","define","oop","lang","EventEmitter","Editor","Renderer","VirtualRenderer","EditSession","$container","$theme","$splits","$editorCSS","$editors","$orientation","$cEditor","UndoManagerProxy","undoManager","$u","$doc","implement","$createEditor","el","document","cssText","appendChild","_emit","$fontSize","removeChild","getSplits","idx","getCurrentEditor","blur","keybinding","callback","scope","$cloneSession","s","getDocument","getMode","getUndoManager","undoManagerProxy","$informUndoManager","delayedCall","$deltas","setTabSize","getTabSize","setUseSoftTabs","getUseSoftTabs","setOverwrite","getOverwrite","setBreakpoints","getBreakpoints","getUseWrapMode","setUseWorker","getUseWorker","setWrapLimitRange","$wrapLimitRange","min","max","$foldData","$cloneFoldData","setSession","some","getOrientation","clientWidth","clientHeight","editorWidth","top","left","editorHeight","execute","options","undo","selectionRange","setSelectionRange","redo","reset","hasUndo","hasRedo","_split2","_diffMatchPatch2","DiffComponent","state","diff","setState","dmp","lhString","rhString","diff_main","diff_cleanupSemantic","diffedLines","generateDiffedLines","setCodeMarkers","C","right","cursor","chunk","chunkType","lines","firstChar","lastChar","linesToHighlight","startLine","endLine","Error","codeEditorSettings","newMarkerSet","markerObj","_markerObj","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","diff_cleanupMerge","longtext","shorttext","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","pointer","count_delete","count_insert","text_delete","text_insert","j","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","fromCharCode","charCodeAt","pointermin","pointermax","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","op","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","param","decodeURI","ex","parseInt","isNaN","match_main","match_bitap_","match_alphabet_","match_bitapScore_","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","slice","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","_ace2","_diff2"],"mappings":"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","file":"13-96055641d555c7872bda.js","sourcesContent":["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar editorOptions = ['minLines', 'maxLines', 'readOnly', 'highlightActiveLine', 'tabSize', 'enableBasicAutocompletion', 'enableLiveAutocompletion', 'enableSnippets'];\n\nvar editorEvents = ['onChange', 'onFocus', 'onInput', 'onBlur', 'onCopy', 'onPaste', 'onSelectionChange', 'onCursorChange', 'onScroll', 'handleOptions', 'updateRef'];\nvar getAceInstance = function getAceInstance() {\n  var ace = void 0;\n  // Fallback for ace.require when vanilla ACE is hosted over a CDN\n  if (window.ace) {\n    ace = window.ace;\n    ace.acequire = window.ace.require || window.ace.acequire;\n  } else {\n    ace = require('brace');\n  }\n  return ace;\n};\n\nvar debounce = function debounce(fn, delay) {\n  var timer = null;\n  return function () {\n    var context = this,\n        args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\nexports.editorOptions = editorOptions;\nexports.editorEvents = editorEvents;\nexports.debounce = debounce;\nexports.getAceInstance = getAceInstance;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _editorOptions = require('./editorOptions.js');\n\nrequire('brace');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash.isequal');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.get');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nrequire('brace/ext/split');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ace = (0, _editorOptions.getAceInstance)();\n\nvar _ace$acequire = ace.acequire('ace/range'),\n    Range = _ace$acequire.Range;\n\nvar _ace$acequire2 = ace.acequire('ace/split'),\n    Split = _ace$acequire2.Split;\n\nvar SplitComponent = function (_Component) {\n  _inherits(SplitComponent, _Component);\n\n  function SplitComponent(props) {\n    _classCallCheck(this, SplitComponent);\n\n    var _this = _possibleConstructorReturn(this, (SplitComponent.__proto__ || Object.getPrototypeOf(SplitComponent)).call(this, props));\n\n    _editorOptions.editorEvents.forEach(function (method) {\n      _this[method] = _this[method].bind(_this);\n    });\n    _this.debounce = _editorOptions.debounce;\n    return _this;\n  }\n\n  _createClass(SplitComponent, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          onBeforeLoad = _props.onBeforeLoad,\n          mode = _props.mode,\n          focus = _props.focus,\n          theme = _props.theme,\n          fontSize = _props.fontSize,\n          value = _props.value,\n          defaultValue = _props.defaultValue,\n          cursorStart = _props.cursorStart,\n          showGutter = _props.showGutter,\n          wrapEnabled = _props.wrapEnabled,\n          showPrintMargin = _props.showPrintMargin,\n          _props$scrollMargin = _props.scrollMargin,\n          scrollMargin = _props$scrollMargin === undefined ? [0, 0, 0, 0] : _props$scrollMargin,\n          keyboardHandler = _props.keyboardHandler,\n          onLoad = _props.onLoad,\n          commands = _props.commands,\n          annotations = _props.annotations,\n          markers = _props.markers,\n          splits = _props.splits;\n\n\n      this.editor = ace.edit(this.refEditor);\n\n      if (onBeforeLoad) {\n        onBeforeLoad(ace);\n      }\n\n      var editorProps = Object.keys(this.props.editorProps);\n\n      var split = new Split(this.editor.container, 'ace/theme/' + theme, splits);\n      this.editor.env.split = split;\n\n      this.splitEditor = split.getEditor(0);\n      this.split = split;\n      // in a split scenario we don't want a print margin for the entire application\n      this.editor.setShowPrintMargin(false);\n      this.editor.renderer.setShowGutter(false);\n      // get a list of possible options to avoid 'misspelled option errors'\n      var availableOptions = this.splitEditor.$options;\n      if (this.props.debounceChangePeriod) {\n        this.onChange = this.debounce(this.onChange, this.props.debounceChangePeriod);\n      }\n      split.forEach(function (editor, index) {\n        for (var i = 0; i < editorProps.length; i++) {\n          editor[editorProps[i]] = _this2.props.editorProps[editorProps[i]];\n        }\n        var defaultValueForEditor = (0, _lodash4.default)(defaultValue, index);\n        var valueForEditor = (0, _lodash4.default)(value, index, '');\n        editor.session.setUndoManager(new ace.UndoManager());\n        editor.setTheme('ace/theme/' + theme);\n        editor.renderer.setScrollMargin(scrollMargin[0], scrollMargin[1], scrollMargin[2], scrollMargin[3]);\n        editor.getSession().setMode('ace/mode/' + mode);\n        editor.setFontSize(fontSize);\n        editor.renderer.setShowGutter(showGutter);\n        editor.getSession().setUseWrapMode(wrapEnabled);\n        editor.setShowPrintMargin(showPrintMargin);\n        editor.on('focus', _this2.onFocus);\n        editor.on('blur', _this2.onBlur);\n        editor.on('input', _this2.onInput);\n        editor.on('copy', _this2.onCopy);\n        editor.on('paste', _this2.onPaste);\n        editor.on('change', _this2.onChange);\n        editor.getSession().selection.on('changeSelection', _this2.onSelectionChange);\n        editor.getSession().selection.on('changeCursor', _this2.onCursorChange);\n        editor.session.on('changeScrollTop', _this2.onScroll);\n        editor.setValue(defaultValueForEditor === undefined ? valueForEditor : defaultValueForEditor, cursorStart);\n        var newAnnotations = (0, _lodash4.default)(annotations, index, []);\n        var newMarkers = (0, _lodash4.default)(markers, index, []);\n        editor.getSession().setAnnotations(newAnnotations);\n        if (newMarkers && newMarkers.length > 0) {\n          _this2.handleMarkers(newMarkers, editor);\n        }\n\n        for (var _i = 0; _i < _editorOptions.editorOptions.length; _i++) {\n          var option = _editorOptions.editorOptions[_i];\n          if (availableOptions.hasOwnProperty(option)) {\n            editor.setOption(option, _this2.props[option]);\n          } else if (_this2.props[option]) {\n            console.warn('ReaceAce: editor option ' + option + ' was activated but not found. Did you need to import a related tool or did you possibly mispell the option?');\n          }\n        }\n        _this2.handleOptions(_this2.props, editor);\n\n        if (Array.isArray(commands)) {\n          commands.forEach(function (command) {\n            if (typeof command.exec == 'string') {\n              editor.commands.bindKey(command.bindKey, command.exec);\n            } else {\n              editor.commands.addCommand(command);\n            }\n          });\n        }\n\n        if (keyboardHandler) {\n          editor.setKeyboardHandler('ace/keyboard/' + keyboardHandler);\n        }\n      });\n\n      if (className) {\n        this.refEditor.className += ' ' + className;\n      }\n\n      if (focus) {\n        this.splitEditor.focus();\n      }\n\n      var sp = this.editor.env.split;\n      sp.setOrientation(this.props.orientation === 'below' ? sp.BELOW : sp.BESIDE);\n      sp.resize(true);\n      if (onLoad) {\n        onLoad(sp);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n\n      var oldProps = prevProps;\n      var nextProps = this.props;\n\n      var split = this.editor.env.split;\n\n      if (nextProps.splits !== oldProps.splits) {\n        split.setSplits(nextProps.splits);\n      }\n\n      if (nextProps.orientation !== oldProps.orientation) {\n        split.setOrientation(nextProps.orientation === 'below' ? split.BELOW : split.BESIDE);\n      }\n\n      split.forEach(function (editor, index) {\n        if (nextProps.mode !== oldProps.mode) {\n          editor.getSession().setMode('ace/mode/' + nextProps.mode);\n        }\n        if (nextProps.keyboardHandler !== oldProps.keyboardHandler) {\n          if (nextProps.keyboardHandler) {\n            editor.setKeyboardHandler('ace/keyboard/' + nextProps.keyboardHandler);\n          } else {\n            editor.setKeyboardHandler(null);\n          }\n        }\n        if (nextProps.fontSize !== oldProps.fontSize) {\n          editor.setFontSize(nextProps.fontSize);\n        }\n        if (nextProps.wrapEnabled !== oldProps.wrapEnabled) {\n          editor.getSession().setUseWrapMode(nextProps.wrapEnabled);\n        }\n        if (nextProps.showPrintMargin !== oldProps.showPrintMargin) {\n          editor.setShowPrintMargin(nextProps.showPrintMargin);\n        }\n        if (nextProps.showGutter !== oldProps.showGutter) {\n          editor.renderer.setShowGutter(nextProps.showGutter);\n        }\n\n        for (var i = 0; i < _editorOptions.editorOptions.length; i++) {\n          var option = _editorOptions.editorOptions[i];\n          if (nextProps[option] !== oldProps[option]) {\n            editor.setOption(option, nextProps[option]);\n          }\n        }\n        if (!(0, _lodash2.default)(nextProps.setOptions, oldProps.setOptions)) {\n          _this3.handleOptions(nextProps, editor);\n        }\n        var nextValue = (0, _lodash4.default)(nextProps.value, index, '');\n        if (editor.getValue() !== nextValue) {\n          // editor.setValue is a synchronous function call, change event is emitted before setValue return.\n          _this3.silent = true;\n          var pos = editor.session.selection.toJSON();\n          editor.setValue(nextValue, nextProps.cursorStart);\n          editor.session.selection.fromJSON(pos);\n          _this3.silent = false;\n        }\n        var newAnnotations = (0, _lodash4.default)(nextProps.annotations, index, []);\n        var oldAnnotations = (0, _lodash4.default)(oldProps.annotations, index, []);\n        if (!(0, _lodash2.default)(newAnnotations, oldAnnotations)) {\n          editor.getSession().setAnnotations(newAnnotations);\n        }\n\n        var newMarkers = (0, _lodash4.default)(nextProps.markers, index, []);\n        var oldMarkers = (0, _lodash4.default)(oldProps.markers, index, []);\n        if (!(0, _lodash2.default)(newMarkers, oldMarkers) && Array.isArray(newMarkers)) {\n          _this3.handleMarkers(newMarkers, editor);\n        }\n      });\n\n      if (nextProps.className !== oldProps.className) {\n        var appliedClasses = this.refEditor.className;\n        var appliedClassesArray = appliedClasses.trim().split(' ');\n        var oldClassesArray = oldProps.className.trim().split(' ');\n        oldClassesArray.forEach(function (oldClass) {\n          var index = appliedClassesArray.indexOf(oldClass);\n          appliedClassesArray.splice(index, 1);\n        });\n        this.refEditor.className = ' ' + nextProps.className + ' ' + appliedClassesArray.join(' ');\n      }\n\n      if (nextProps.theme !== oldProps.theme) {\n        split.setTheme('ace/theme/' + nextProps.theme);\n      }\n\n      if (nextProps.focus && !oldProps.focus) {\n        this.splitEditor.focus();\n      }\n      if (nextProps.height !== this.props.height || nextProps.width !== this.props.width) {\n        this.editor.resize();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.editor.destroy();\n      this.editor = null;\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(event) {\n      if (this.props.onChange && !this.silent) {\n        var value = [];\n        this.editor.env.split.forEach(function (editor) {\n          value.push(editor.getValue());\n        });\n        this.props.onChange(value, event);\n      }\n    }\n  }, {\n    key: 'onSelectionChange',\n    value: function onSelectionChange(event) {\n      if (this.props.onSelectionChange) {\n        var value = [];\n        this.editor.env.split.forEach(function (editor) {\n          value.push(editor.getSelection());\n        });\n        this.props.onSelectionChange(value, event);\n      }\n    }\n  }, {\n    key: 'onCursorChange',\n    value: function onCursorChange(event) {\n      if (this.props.onCursorChange) {\n        var value = [];\n        this.editor.env.split.forEach(function (editor) {\n          value.push(editor.getSelection());\n        });\n        this.props.onCursorChange(value, event);\n      }\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus(event) {\n      if (this.props.onFocus) {\n        this.props.onFocus(event);\n      }\n    }\n  }, {\n    key: 'onInput',\n    value: function onInput(event) {\n      if (this.props.onInput) {\n        this.props.onInput(event);\n      }\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur(event) {\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    }\n  }, {\n    key: 'onCopy',\n    value: function onCopy(text) {\n      if (this.props.onCopy) {\n        this.props.onCopy(text);\n      }\n    }\n  }, {\n    key: 'onPaste',\n    value: function onPaste(text) {\n      if (this.props.onPaste) {\n        this.props.onPaste(text);\n      }\n    }\n  }, {\n    key: 'onScroll',\n    value: function onScroll() {\n      if (this.props.onScroll) {\n        this.props.onScroll(this.editor);\n      }\n    }\n  }, {\n    key: 'handleOptions',\n    value: function handleOptions(props, editor) {\n      var setOptions = Object.keys(props.setOptions);\n      for (var y = 0; y < setOptions.length; y++) {\n        editor.setOption(setOptions[y], props.setOptions[setOptions[y]]);\n      }\n    }\n  }, {\n    key: 'handleMarkers',\n    value: function handleMarkers(markers, editor) {\n      // remove foreground markers\n      var currentMarkers = editor.getSession().getMarkers(true);\n      for (var i in currentMarkers) {\n        if (currentMarkers.hasOwnProperty(i)) {\n          editor.getSession().removeMarker(currentMarkers[i].id);\n        }\n      }\n      // remove background markers\n      currentMarkers = editor.getSession().getMarkers(false);\n      for (var _i2 in currentMarkers) {\n        if (currentMarkers.hasOwnProperty(_i2)) {\n          editor.getSession().removeMarker(currentMarkers[_i2].id);\n        }\n      }\n      // add new markers\n      markers.forEach(function (_ref) {\n        var startRow = _ref.startRow,\n            startCol = _ref.startCol,\n            endRow = _ref.endRow,\n            endCol = _ref.endCol,\n            className = _ref.className,\n            type = _ref.type,\n            _ref$inFront = _ref.inFront,\n            inFront = _ref$inFront === undefined ? false : _ref$inFront;\n\n        var range = new Range(startRow, startCol, endRow, endCol);\n        editor.getSession().addMarker(range, className, type, inFront);\n      });\n    }\n  }, {\n    key: 'updateRef',\n    value: function updateRef(item) {\n      this.refEditor = item;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          name = _props2.name,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style;\n\n      var divStyle = _extends({ width: width, height: height }, style);\n      return _react2.default.createElement('div', { ref: this.updateRef, id: name, style: divStyle });\n    }\n  }]);\n\n  return SplitComponent;\n}(_react.Component);\n\nexports.default = SplitComponent;\n\n\nSplitComponent.propTypes = {\n  mode: _propTypes2.default.string,\n  splits: _propTypes2.default.number,\n  orientation: _propTypes2.default.string,\n  focus: _propTypes2.default.bool,\n  theme: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  height: _propTypes2.default.string,\n  width: _propTypes2.default.string,\n  fontSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  showGutter: _propTypes2.default.bool,\n  onChange: _propTypes2.default.func,\n  onCopy: _propTypes2.default.func,\n  onPaste: _propTypes2.default.func,\n  onFocus: _propTypes2.default.func,\n  onInput: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onScroll: _propTypes2.default.func,\n  value: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  defaultValue: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  debounceChangePeriod: _propTypes2.default.number,\n  onLoad: _propTypes2.default.func,\n  onSelectionChange: _propTypes2.default.func,\n  onCursorChange: _propTypes2.default.func,\n  onBeforeLoad: _propTypes2.default.func,\n  minLines: _propTypes2.default.number,\n  maxLines: _propTypes2.default.number,\n  readOnly: _propTypes2.default.bool,\n  highlightActiveLine: _propTypes2.default.bool,\n  tabSize: _propTypes2.default.number,\n  showPrintMargin: _propTypes2.default.bool,\n  cursorStart: _propTypes2.default.number,\n  editorProps: _propTypes2.default.object,\n  setOptions: _propTypes2.default.object,\n  style: _propTypes2.default.object,\n  scrollMargin: _propTypes2.default.array,\n  annotations: _propTypes2.default.array,\n  markers: _propTypes2.default.array,\n  keyboardHandler: _propTypes2.default.string,\n  wrapEnabled: _propTypes2.default.bool,\n  enableBasicAutocompletion: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),\n  enableLiveAutocompletion: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),\n  commands: _propTypes2.default.array\n};\n\nSplitComponent.defaultProps = {\n  name: 'brace-editor',\n  focus: false,\n  orientation: 'beside',\n  splits: 2,\n  mode: '',\n  theme: '',\n  height: '500px',\n  width: '500px',\n  value: [],\n  fontSize: 12,\n  showGutter: true,\n  onChange: null,\n  onPaste: null,\n  onLoad: null,\n  onScroll: null,\n  minLines: null,\n  maxLines: null,\n  readOnly: false,\n  highlightActiveLine: true,\n  showPrintMargin: true,\n  tabSize: 4,\n  cursorStart: 1,\n  editorProps: {},\n  style: {},\n  scrollMargin: [0, 0, 0, 0],\n  setOptions: {},\n  wrapEnabled: false,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: false\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash.isequal');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _editorOptions = require('./editorOptions.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ace = (0, _editorOptions.getAceInstance)();\n\nvar _ace$acequire = ace.acequire('ace/range'),\n    Range = _ace$acequire.Range;\n\nvar ReactAce = function (_Component) {\n  _inherits(ReactAce, _Component);\n\n  function ReactAce(props) {\n    _classCallCheck(this, ReactAce);\n\n    var _this = _possibleConstructorReturn(this, (ReactAce.__proto__ || Object.getPrototypeOf(ReactAce)).call(this, props));\n\n    _editorOptions.editorEvents.forEach(function (method) {\n      _this[method] = _this[method].bind(_this);\n    });\n    _this.debounce = _editorOptions.debounce;\n    return _this;\n  }\n\n  _createClass(ReactAce, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          onBeforeLoad = _props.onBeforeLoad,\n          onValidate = _props.onValidate,\n          mode = _props.mode,\n          focus = _props.focus,\n          theme = _props.theme,\n          fontSize = _props.fontSize,\n          value = _props.value,\n          defaultValue = _props.defaultValue,\n          cursorStart = _props.cursorStart,\n          showGutter = _props.showGutter,\n          wrapEnabled = _props.wrapEnabled,\n          showPrintMargin = _props.showPrintMargin,\n          _props$scrollMargin = _props.scrollMargin,\n          scrollMargin = _props$scrollMargin === undefined ? [0, 0, 0, 0] : _props$scrollMargin,\n          keyboardHandler = _props.keyboardHandler,\n          onLoad = _props.onLoad,\n          commands = _props.commands,\n          annotations = _props.annotations,\n          markers = _props.markers;\n\n\n      this.editor = ace.edit(this.refEditor);\n\n      if (onBeforeLoad) {\n        onBeforeLoad(ace);\n      }\n\n      var editorProps = Object.keys(this.props.editorProps);\n      for (var i = 0; i < editorProps.length; i++) {\n        this.editor[editorProps[i]] = this.props.editorProps[editorProps[i]];\n      }\n      if (this.props.debounceChangePeriod) {\n        this.onChange = this.debounce(this.onChange, this.props.debounceChangePeriod);\n      }\n      this.editor.renderer.setScrollMargin(scrollMargin[0], scrollMargin[1], scrollMargin[2], scrollMargin[3]);\n      this.editor.getSession().setMode('ace/mode/' + mode);\n      this.editor.setTheme('ace/theme/' + theme);\n      this.editor.setFontSize(fontSize);\n      this.editor.getSession().setValue(!defaultValue ? value : defaultValue, cursorStart);\n      this.editor.navigateFileEnd();\n      this.editor.renderer.setShowGutter(showGutter);\n      this.editor.getSession().setUseWrapMode(wrapEnabled);\n      this.editor.setShowPrintMargin(showPrintMargin);\n      this.editor.on('focus', this.onFocus);\n      this.editor.on('blur', this.onBlur);\n      this.editor.on('copy', this.onCopy);\n      this.editor.on('paste', this.onPaste);\n      this.editor.on('change', this.onChange);\n      this.editor.on('input', this.onInput);\n      this.editor.getSession().selection.on('changeSelection', this.onSelectionChange);\n      this.editor.getSession().selection.on('changeCursor', this.onCursorChange);\n      if (onValidate) {\n        this.editor.getSession().on('changeAnnotation', function () {\n          var annotations = _this2.editor.getSession().getAnnotations();\n          _this2.props.onValidate(annotations);\n        });\n      }\n      this.editor.session.on('changeScrollTop', this.onScroll);\n      this.editor.getSession().setAnnotations(annotations || []);\n      if (markers && markers.length > 0) {\n        this.handleMarkers(markers);\n      }\n\n      // get a list of possible options to avoid 'misspelled option errors'\n      var availableOptions = this.editor.$options;\n      for (var _i = 0; _i < _editorOptions.editorOptions.length; _i++) {\n        var option = _editorOptions.editorOptions[_i];\n        if (availableOptions.hasOwnProperty(option)) {\n          this.editor.setOption(option, this.props[option]);\n        } else if (this.props[option]) {\n          console.warn('ReactAce: editor option ' + option + ' was activated but not found. Did you need to import a related tool or did you possibly mispell the option?');\n        }\n      }\n      this.handleOptions(this.props);\n\n      if (Array.isArray(commands)) {\n        commands.forEach(function (command) {\n          if (typeof command.exec == 'string') {\n            _this2.editor.commands.bindKey(command.bindKey, command.exec);\n          } else {\n            _this2.editor.commands.addCommand(command);\n          }\n        });\n      }\n\n      if (keyboardHandler) {\n        this.editor.setKeyboardHandler('ace/keyboard/' + keyboardHandler);\n      }\n\n      if (className) {\n        this.refEditor.className += ' ' + className;\n      }\n\n      if (onLoad) {\n        onLoad(this.editor);\n      }\n\n      this.editor.resize();\n\n      if (focus) {\n        this.editor.focus();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var oldProps = prevProps;\n      var nextProps = this.props;\n\n      for (var i = 0; i < _editorOptions.editorOptions.length; i++) {\n        var option = _editorOptions.editorOptions[i];\n        if (nextProps[option] !== oldProps[option]) {\n          this.editor.setOption(option, nextProps[option]);\n        }\n      }\n\n      if (nextProps.className !== oldProps.className) {\n        var appliedClasses = this.refEditor.className;\n        var appliedClassesArray = appliedClasses.trim().split(' ');\n        var oldClassesArray = oldProps.className.trim().split(' ');\n        oldClassesArray.forEach(function (oldClass) {\n          var index = appliedClassesArray.indexOf(oldClass);\n          appliedClassesArray.splice(index, 1);\n        });\n        this.refEditor.className = ' ' + nextProps.className + ' ' + appliedClassesArray.join(' ');\n      }\n\n      // First process editor value, as it may create a new session (see issue #300)\n      if (this.editor && this.editor.getValue() !== nextProps.value) {\n        // editor.setValue is a synchronous function call, change event is emitted before setValue return.\n        this.silent = true;\n        var pos = this.editor.session.selection.toJSON();\n        this.editor.setValue(nextProps.value, nextProps.cursorStart);\n        this.editor.session.selection.fromJSON(pos);\n        this.silent = false;\n      }\n\n      if (nextProps.mode !== oldProps.mode) {\n        this.editor.getSession().setMode('ace/mode/' + nextProps.mode);\n      }\n      if (nextProps.theme !== oldProps.theme) {\n        this.editor.setTheme('ace/theme/' + nextProps.theme);\n      }\n      if (nextProps.keyboardHandler !== oldProps.keyboardHandler) {\n        if (nextProps.keyboardHandler) {\n          this.editor.setKeyboardHandler('ace/keyboard/' + nextProps.keyboardHandler);\n        } else {\n          this.editor.setKeyboardHandler(null);\n        }\n      }\n      if (nextProps.fontSize !== oldProps.fontSize) {\n        this.editor.setFontSize(nextProps.fontSize);\n      }\n      if (nextProps.wrapEnabled !== oldProps.wrapEnabled) {\n        this.editor.getSession().setUseWrapMode(nextProps.wrapEnabled);\n      }\n      if (nextProps.showPrintMargin !== oldProps.showPrintMargin) {\n        this.editor.setShowPrintMargin(nextProps.showPrintMargin);\n      }\n      if (nextProps.showGutter !== oldProps.showGutter) {\n        this.editor.renderer.setShowGutter(nextProps.showGutter);\n      }\n      if (!(0, _lodash2.default)(nextProps.setOptions, oldProps.setOptions)) {\n        this.handleOptions(nextProps);\n      }\n      if (!(0, _lodash2.default)(nextProps.annotations, oldProps.annotations)) {\n        this.editor.getSession().setAnnotations(nextProps.annotations || []);\n      }\n      if (!(0, _lodash2.default)(nextProps.markers, oldProps.markers) && Array.isArray(nextProps.markers)) {\n        this.handleMarkers(nextProps.markers);\n      }\n\n      // this doesn't look like it works at all....\n      if (!(0, _lodash2.default)(nextProps.scrollMargin, oldProps.scrollMargin)) {\n        this.handleScrollMargins(nextProps.scrollMargin);\n      }\n\n      if (prevProps.height !== this.props.height || prevProps.width !== this.props.width) {\n        this.editor.resize();\n      }\n      if (this.props.focus && !prevProps.focus) {\n        this.editor.focus();\n      }\n    }\n  }, {\n    key: 'handleScrollMargins',\n    value: function handleScrollMargins() {\n      var margins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0, 0];\n\n      this.editor.renderer.setScrollMargins(margins[0], margins[1], margins[2], margins[3]);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.editor.destroy();\n      this.editor = null;\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(event) {\n      if (this.props.onChange && !this.silent) {\n        var value = this.editor.getValue();\n        this.props.onChange(value, event);\n      }\n    }\n  }, {\n    key: 'onSelectionChange',\n    value: function onSelectionChange(event) {\n      if (this.props.onSelectionChange) {\n        var value = this.editor.getSelection();\n        this.props.onSelectionChange(value, event);\n      }\n    }\n  }, {\n    key: 'onCursorChange',\n    value: function onCursorChange(event) {\n      if (this.props.onCursorChange) {\n        var value = this.editor.getSelection();\n        this.props.onCursorChange(value, event);\n      }\n    }\n  }, {\n    key: 'onInput',\n    value: function onInput(event) {\n      if (this.props.onInput) {\n        this.props.onInput(event);\n      }\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus(event) {\n      if (this.props.onFocus) {\n        this.props.onFocus(event, this.editor);\n      }\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur(event) {\n      if (this.props.onBlur) {\n        this.props.onBlur(event, this.editor);\n      }\n    }\n  }, {\n    key: 'onCopy',\n    value: function onCopy(text) {\n      if (this.props.onCopy) {\n        this.props.onCopy(text);\n      }\n    }\n  }, {\n    key: 'onPaste',\n    value: function onPaste(text) {\n      if (this.props.onPaste) {\n        this.props.onPaste(text);\n      }\n    }\n  }, {\n    key: 'onScroll',\n    value: function onScroll() {\n      if (this.props.onScroll) {\n        this.props.onScroll(this.editor);\n      }\n    }\n  }, {\n    key: 'handleOptions',\n    value: function handleOptions(props) {\n      var setOptions = Object.keys(props.setOptions);\n      for (var y = 0; y < setOptions.length; y++) {\n        this.editor.setOption(setOptions[y], props.setOptions[setOptions[y]]);\n      }\n    }\n  }, {\n    key: 'handleMarkers',\n    value: function handleMarkers(markers) {\n      var _this3 = this;\n\n      // remove foreground markers\n      var currentMarkers = this.editor.getSession().getMarkers(true);\n      for (var i in currentMarkers) {\n        if (currentMarkers.hasOwnProperty(i)) {\n          this.editor.getSession().removeMarker(currentMarkers[i].id);\n        }\n      }\n      // remove background markers\n      currentMarkers = this.editor.getSession().getMarkers(false);\n      for (var _i2 in currentMarkers) {\n        if (currentMarkers.hasOwnProperty(_i2)) {\n          this.editor.getSession().removeMarker(currentMarkers[_i2].id);\n        }\n      }\n      // add new markers\n      markers.forEach(function (_ref) {\n        var startRow = _ref.startRow,\n            startCol = _ref.startCol,\n            endRow = _ref.endRow,\n            endCol = _ref.endCol,\n            className = _ref.className,\n            type = _ref.type,\n            _ref$inFront = _ref.inFront,\n            inFront = _ref$inFront === undefined ? false : _ref$inFront;\n\n        var range = new Range(startRow, startCol, endRow, endCol);\n        _this3.editor.getSession().addMarker(range, className, type, inFront);\n      });\n    }\n  }, {\n    key: 'updateRef',\n    value: function updateRef(item) {\n      this.refEditor = item;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          name = _props2.name,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style;\n\n      var divStyle = _extends({ width: width, height: height }, style);\n      return _react2.default.createElement('div', { ref: this.updateRef, id: name, style: divStyle });\n    }\n  }]);\n\n  return ReactAce;\n}(_react.Component);\n\nexports.default = ReactAce;\n\n\nReactAce.propTypes = {\n  mode: _propTypes2.default.string,\n  focus: _propTypes2.default.bool,\n  theme: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  height: _propTypes2.default.string,\n  width: _propTypes2.default.string,\n  fontSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  showGutter: _propTypes2.default.bool,\n  onChange: _propTypes2.default.func,\n  onCopy: _propTypes2.default.func,\n  onPaste: _propTypes2.default.func,\n  onFocus: _propTypes2.default.func,\n  onInput: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onScroll: _propTypes2.default.func,\n  value: _propTypes2.default.string,\n  defaultValue: _propTypes2.default.string,\n  onLoad: _propTypes2.default.func,\n  onSelectionChange: _propTypes2.default.func,\n  onCursorChange: _propTypes2.default.func,\n  onBeforeLoad: _propTypes2.default.func,\n  onValidate: _propTypes2.default.func,\n  minLines: _propTypes2.default.number,\n  maxLines: _propTypes2.default.number,\n  readOnly: _propTypes2.default.bool,\n  highlightActiveLine: _propTypes2.default.bool,\n  tabSize: _propTypes2.default.number,\n  showPrintMargin: _propTypes2.default.bool,\n  cursorStart: _propTypes2.default.number,\n  debounceChangePeriod: _propTypes2.default.number,\n  editorProps: _propTypes2.default.object,\n  setOptions: _propTypes2.default.object,\n  style: _propTypes2.default.object,\n  scrollMargin: _propTypes2.default.array,\n  annotations: _propTypes2.default.array,\n  markers: _propTypes2.default.array,\n  keyboardHandler: _propTypes2.default.string,\n  wrapEnabled: _propTypes2.default.bool,\n  enableBasicAutocompletion: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),\n  enableLiveAutocompletion: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),\n  commands: _propTypes2.default.array\n};\n\nReactAce.defaultProps = {\n  name: 'brace-editor',\n  focus: false,\n  mode: '',\n  theme: '',\n  height: '500px',\n  width: '500px',\n  value: '',\n  fontSize: 12,\n  showGutter: true,\n  onChange: null,\n  onPaste: null,\n  onLoad: null,\n  onScroll: null,\n  minLines: null,\n  maxLines: null,\n  readOnly: false,\n  highlightActiveLine: true,\n  showPrintMargin: true,\n  tabSize: 4,\n  cursorStart: 1,\n  editorProps: {},\n  style: {},\n  scrollMargin: [0, 0, 0, 0],\n  setOptions: {},\n  wrapEnabled: false,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: false\n};","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","ace.define(\"ace/split\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/lib/event_emitter\",\"ace/editor\",\"ace/virtual_renderer\",\"ace/edit_session\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"./lib/oop\");\nvar lang = acequire(\"./lib/lang\");\nvar EventEmitter = acequire(\"./lib/event_emitter\").EventEmitter;\n\nvar Editor = acequire(\"./editor\").Editor;\nvar Renderer = acequire(\"./virtual_renderer\").VirtualRenderer;\nvar EditSession = acequire(\"./edit_session\").EditSession;\n\n\nvar Split = function(container, theme, splits) {\n    this.BELOW = 1;\n    this.BESIDE = 0;\n\n    this.$container = container;\n    this.$theme = theme;\n    this.$splits = 0;\n    this.$editorCSS = \"\";\n    this.$editors = [];\n    this.$orientation = this.BESIDE;\n\n    this.setSplits(splits || 1);\n    this.$cEditor = this.$editors[0];\n\n\n    this.on(\"focus\", function(editor) {\n        this.$cEditor = editor;\n    }.bind(this));\n};\n\n(function(){\n\n    oop.implement(this, EventEmitter);\n\n    this.$createEditor = function() {\n        var el = document.createElement(\"div\");\n        el.className = this.$editorCSS;\n        el.style.cssText = \"position: absolute; top:0px; bottom:0px\";\n        this.$container.appendChild(el);\n        var editor = new Editor(new Renderer(el, this.$theme));\n\n        editor.on(\"focus\", function() {\n            this._emit(\"focus\", editor);\n        }.bind(this));\n\n        this.$editors.push(editor);\n        editor.setFontSize(this.$fontSize);\n        return editor;\n    };\n\n    this.setSplits = function(splits) {\n        var editor;\n        if (splits < 1) {\n            throw \"The number of splits have to be > 0!\";\n        }\n\n        if (splits == this.$splits) {\n            return;\n        } else if (splits > this.$splits) {\n            while (this.$splits < this.$editors.length && this.$splits < splits) {\n                editor = this.$editors[this.$splits];\n                this.$container.appendChild(editor.container);\n                editor.setFontSize(this.$fontSize);\n                this.$splits ++;\n            }\n            while (this.$splits < splits) {\n                this.$createEditor();\n                this.$splits ++;\n            }\n        } else {\n            while (this.$splits > splits) {\n                editor = this.$editors[this.$splits - 1];\n                this.$container.removeChild(editor.container);\n                this.$splits --;\n            }\n        }\n        this.resize();\n    };\n    this.getSplits = function() {\n        return this.$splits;\n    };\n    this.getEditor = function(idx) {\n        return this.$editors[idx];\n    };\n    this.getCurrentEditor = function() {\n        return this.$cEditor;\n    };\n    this.focus = function() {\n        this.$cEditor.focus();\n    };\n    this.blur = function() {\n        this.$cEditor.blur();\n    };\n    this.setTheme = function(theme) {\n        this.$editors.forEach(function(editor) {\n            editor.setTheme(theme);\n        });\n    };\n    this.setKeyboardHandler = function(keybinding) {\n        this.$editors.forEach(function(editor) {\n            editor.setKeyboardHandler(keybinding);\n        });\n    };\n    this.forEach = function(callback, scope) {\n        this.$editors.forEach(callback, scope);\n    };\n\n\n    this.$fontSize = \"\";\n    this.setFontSize = function(size) {\n        this.$fontSize = size;\n        this.forEach(function(editor) {\n           editor.setFontSize(size);\n        });\n    };\n\n    this.$cloneSession = function(session) {\n        var s = new EditSession(session.getDocument(), session.getMode());\n\n        var undoManager = session.getUndoManager();\n        if (undoManager) {\n            var undoManagerProxy = new UndoManagerProxy(undoManager, s);\n            s.setUndoManager(undoManagerProxy);\n        }\n        s.$informUndoManager = lang.delayedCall(function() { s.$deltas = []; });\n        s.setTabSize(session.getTabSize());\n        s.setUseSoftTabs(session.getUseSoftTabs());\n        s.setOverwrite(session.getOverwrite());\n        s.setBreakpoints(session.getBreakpoints());\n        s.setUseWrapMode(session.getUseWrapMode());\n        s.setUseWorker(session.getUseWorker());\n        s.setWrapLimitRange(session.$wrapLimitRange.min,\n                            session.$wrapLimitRange.max);\n        s.$foldData = session.$cloneFoldData();\n\n        return s;\n    };\n    this.setSession = function(session, idx) {\n        var editor;\n        if (idx == null) {\n            editor = this.$cEditor;\n        } else {\n            editor = this.$editors[idx];\n        }\n        var isUsed = this.$editors.some(function(editor) {\n           return editor.session === session;\n        });\n\n        if (isUsed) {\n            session = this.$cloneSession(session);\n        }\n        editor.setSession(session);\n        return session;\n    };\n    this.getOrientation = function() {\n        return this.$orientation;\n    };\n    this.setOrientation = function(orientation) {\n        if (this.$orientation == orientation) {\n            return;\n        }\n        this.$orientation = orientation;\n        this.resize();\n    };\n    this.resize = function() {\n        var width = this.$container.clientWidth;\n        var height = this.$container.clientHeight;\n        var editor;\n\n        if (this.$orientation == this.BESIDE) {\n            var editorWidth = width / this.$splits;\n            for (var i = 0; i < this.$splits; i++) {\n                editor = this.$editors[i];\n                editor.container.style.width = editorWidth + \"px\";\n                editor.container.style.top = \"0px\";\n                editor.container.style.left = i * editorWidth + \"px\";\n                editor.container.style.height = height + \"px\";\n                editor.resize();\n            }\n        } else {\n            var editorHeight = height / this.$splits;\n            for (var i = 0; i < this.$splits; i++) {\n                editor = this.$editors[i];\n                editor.container.style.width = width + \"px\";\n                editor.container.style.top = i * editorHeight + \"px\";\n                editor.container.style.left = \"0px\";\n                editor.container.style.height = editorHeight + \"px\";\n                editor.resize();\n            }\n        }\n    };\n\n}).call(Split.prototype);\n\n \nfunction UndoManagerProxy(undoManager, session) {\n    this.$u = undoManager;\n    this.$doc = session;\n}\n\n(function() {\n    this.execute = function(options) {\n        this.$u.execute(options);\n    };\n\n    this.undo = function() {\n        var selectionRange = this.$u.undo(true);\n        if (selectionRange) {\n            this.$doc.selection.setSelectionRange(selectionRange);\n        }\n    };\n\n    this.redo = function() {\n        var selectionRange = this.$u.redo(true);\n        if (selectionRange) {\n            this.$doc.selection.setSelectionRange(selectionRange);\n        }\n    };\n\n    this.reset = function() {\n        this.$u.reset();\n    };\n\n    this.hasUndo = function() {\n        return this.$u.hasUndo();\n    };\n\n    this.hasRedo = function() {\n        return this.$u.hasRedo();\n    };\n}).call(UndoManagerProxy.prototype);\n\nexports.Split = Split;\n});\n\nace.define(\"ace/ext/split\",[\"require\",\"exports\",\"module\",\"ace/split\"], function(acequire, exports, module) {\n\"use strict\";\nmodule.exports = acequire(\"../split\");\n\n});\n                (function() {\n                    ace.acequire([\"ace/ext/split\"], function() {});\n                })();\n            ","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _split = require('./split.js');\n\nvar _split2 = _interopRequireDefault(_split);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _diffMatchPatch = require('diff-match-patch');\n\nvar _diffMatchPatch2 = _interopRequireDefault(_diffMatchPatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DiffComponent = function (_Component) {\n  _inherits(DiffComponent, _Component);\n\n  function DiffComponent(props) {\n    _classCallCheck(this, DiffComponent);\n\n    var _this = _possibleConstructorReturn(this, (DiffComponent.__proto__ || Object.getPrototypeOf(DiffComponent)).call(this, props));\n\n    _this.state = {\n      value: _this.props.value\n    };\n    _this.onChange = _this.onChange.bind(_this);\n    _this.diff = _this.diff.bind(_this);\n    return _this;\n  }\n\n  _createClass(DiffComponent, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var value = this.props.value;\n\n\n      if (value !== this.state.value) {\n        this.setState({ value: value });\n      }\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(value) {\n      this.setState({\n        value: value\n      });\n      if (this.props.onChange) {\n        this.props.onChange(value);\n      }\n    }\n  }, {\n    key: 'diff',\n    value: function diff() {\n      var dmp = new _diffMatchPatch2.default();\n      var lhString = this.state.value[0];\n      var rhString = this.state.value[1];\n\n      if (lhString.length === 0 && rhString.length === 0) {\n        return [];\n      }\n\n      var diff = dmp.diff_main(lhString, rhString);\n      dmp.diff_cleanupSemantic(diff);\n\n      var diffedLines = this.generateDiffedLines(diff);\n      var codeEditorSettings = this.setCodeMarkers(diffedLines);\n      return codeEditorSettings;\n    }\n  }, {\n    key: 'generateDiffedLines',\n    value: function generateDiffedLines(diff) {\n      var C = {\n        DIFF_EQUAL: 0,\n        DIFF_DELETE: -1,\n        DIFF_INSERT: 1\n      };\n\n      var diffedLines = {\n        left: [],\n        right: []\n      };\n\n      var cursor = {\n        left: 1,\n        right: 1\n      };\n\n      diff.forEach(function (chunk) {\n        var chunkType = chunk[0];\n        var text = chunk[1];\n        var lines = text.split('\\n').length - 1;\n\n        // diff-match-patch sometimes returns empty strings at random\n        if (text.length === 0) {\n          return;\n        }\n\n        var firstChar = text[0];\n        var lastChar = text[text.length - 1];\n        var linesToHighlight = 0;\n\n        switch (chunkType) {\n          case C.DIFF_EQUAL:\n            cursor.left += lines;\n            cursor.right += lines;\n\n            break;\n          case C.DIFF_DELETE:\n            // If the deletion starts with a newline, push the cursor down to that line\n            if (firstChar === '\\n') {\n              cursor.left++;\n              lines--;\n            }\n\n            linesToHighlight = lines;\n\n            // If the deletion does not include a newline, highlight the same line on the right\n            if (linesToHighlight === 0) {\n              diffedLines.right.push({\n                startLine: cursor.right,\n                endLine: cursor.right\n              });\n            }\n\n            // If the last character is a newline, we don't want to highlight that line\n            if (lastChar === '\\n') {\n              linesToHighlight -= 1;\n            }\n\n            diffedLines.left.push({\n              startLine: cursor.left,\n              endLine: cursor.left + linesToHighlight\n            });\n\n            cursor.left += lines;\n            break;\n          case C.DIFF_INSERT:\n            // If the insertion starts with a newline, push the cursor down to that line\n            if (firstChar === '\\n') {\n              cursor.right++;\n              lines--;\n            }\n\n            linesToHighlight = lines;\n\n            // If the insertion does not include a newline, highlight the same line on the left\n            if (linesToHighlight === 0) {\n              diffedLines.left.push({\n                startLine: cursor.left,\n                endLine: cursor.left\n              });\n            }\n\n            // If the last character is a newline, we don't want to highlight that line\n            if (lastChar === '\\n') {\n              linesToHighlight -= 1;\n            }\n\n            diffedLines.right.push({\n              startLine: cursor.right,\n              endLine: cursor.right + linesToHighlight\n            });\n\n            cursor.right += lines;\n            break;\n          default:\n            throw new Error('Diff type was not defined.');\n        }\n      });\n      return diffedLines;\n    }\n\n    // Receives a collection of line numbers and iterates through them to highlight appropriately\n    // Returns an object that tells the render() method how to display the code editors\n\n  }, {\n    key: 'setCodeMarkers',\n    value: function setCodeMarkers() {\n      var diffedLines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { left: [], right: [] };\n\n      var codeEditorSettings = [];\n\n      var newMarkerSet = {\n        left: [],\n        right: []\n      };\n\n      for (var i = 0; i < diffedLines.left.length; i++) {\n        var markerObj = {\n          startRow: diffedLines.left[i].startLine - 1,\n          endRow: diffedLines.left[i].endLine,\n          type: 'text',\n          className: 'codeMarker'\n        };\n        newMarkerSet.left.push(markerObj);\n      }\n\n      for (var _i = 0; _i < diffedLines.right.length; _i++) {\n        var _markerObj = {\n          startRow: diffedLines.right[_i].startLine - 1,\n          endRow: diffedLines.right[_i].endLine,\n          type: 'text',\n          className: 'codeMarker'\n        };\n        newMarkerSet.right.push(_markerObj);\n      }\n\n      codeEditorSettings[0] = newMarkerSet.left;\n      codeEditorSettings[1] = newMarkerSet.right;\n\n      return codeEditorSettings;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var markers = this.diff();\n      return _react2.default.createElement(_split2.default, {\n        name: this.props.name,\n        className: this.props.className,\n        focus: this.props.focus,\n        orientation: this.props.orientation,\n        splits: this.props.splits,\n        mode: this.props.mode,\n        theme: this.props.theme,\n        height: this.props.height,\n        width: this.props.width,\n        fontSize: this.props.fontSize,\n        showGutter: this.props.showGutter,\n        onChange: this.onChange,\n        onPaste: this.props.onPaste,\n        onLoad: this.props.onLoad,\n        onScroll: this.props.onScroll,\n        minLines: this.props.minLines,\n        maxLines: this.props.maxLines,\n        readOnly: this.props.readOnly,\n        highlightActiveLine: this.props.highlightActiveLine,\n        showPrintMargin: this.props.showPrintMargin,\n        tabSize: this.props.tabSize,\n        cursorStart: this.props.cursorStart,\n        editorProps: this.props.editorProps,\n        style: this.props.style,\n        scrollMargin: this.props.scrollMargin,\n        setOptions: this.props.setOptions,\n        wrapEnabled: this.props.wrapEnabled,\n        enableBasicAutocompletion: this.props.enableBasicAutocompletion,\n        enableLiveAutocompletion: this.props.enableLiveAutocompletion,\n        value: this.state.value,\n        markers: markers\n      });\n    }\n  }]);\n\n  return DiffComponent;\n}(_react.Component);\n\nexports.default = DiffComponent;\n\n\nDiffComponent.propTypes = {\n  cursorStart: _propTypes2.default.number,\n  editorProps: _propTypes2.default.object,\n  enableBasicAutocompletion: _propTypes2.default.bool,\n  enableLiveAutocompletion: _propTypes2.default.bool,\n  focus: _propTypes2.default.bool,\n  fontSize: _propTypes2.default.number,\n  height: _propTypes2.default.string,\n  highlightActiveLine: _propTypes2.default.bool,\n  maxLines: _propTypes2.default.func,\n  minLines: _propTypes2.default.func,\n  mode: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  onLoad: _propTypes2.default.func,\n  onPaste: _propTypes2.default.func,\n  onScroll: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  orientation: _propTypes2.default.string,\n  readOnly: _propTypes2.default.bool,\n  scrollMargin: _propTypes2.default.array,\n  setOptions: _propTypes2.default.object,\n  showGutter: _propTypes2.default.bool,\n  showPrintMargin: _propTypes2.default.bool,\n  splits: _propTypes2.default.number,\n  style: _propTypes2.default.object,\n  tabSize: _propTypes2.default.number,\n  theme: _propTypes2.default.string,\n  value: _propTypes2.default.array,\n  width: _propTypes2.default.string,\n  wrapEnabled: _propTypes2.default.bool\n};\n\nDiffComponent.defaultProps = {\n  cursorStart: 1,\n  editorProps: {},\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: false,\n  focus: false,\n  fontSize: 12,\n  height: '500px',\n  highlightActiveLine: true,\n  maxLines: null,\n  minLines: null,\n  mode: '',\n  name: 'brace-editor',\n  onLoad: null,\n  onScroll: null,\n  onPaste: null,\n  onChange: null,\n  orientation: 'beside',\n  readOnly: false,\n  scrollMargin: [0, 0, 0, 0],\n  setOptions: {},\n  showGutter: true,\n  showPrintMargin: true,\n  splits: 2,\n  style: {},\n  tabSize: 4,\n  theme: 'github',\n  value: ['', ''],\n  width: '500px',\n  wrapEnabled: true\n};","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff_match_patch.Diff;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diff_type, diff_text]);\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diff = exports.split = undefined;\n\nvar _ace = require('./ace.js');\n\nvar _ace2 = _interopRequireDefault(_ace);\n\nvar _split = require('./split.js');\n\nvar _split2 = _interopRequireDefault(_split);\n\nvar _diff = require('./diff.js');\n\nvar _diff2 = _interopRequireDefault(_diff);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.split = _split2.default;\nexports.diff = _diff2.default;\nexports.default = _ace2.default;"],"sourceRoot":""}